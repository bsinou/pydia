plugins {
    alias libs.plugins.android.application
//    id 'com.android.application'
    alias libs.plugins.compose.compiler

    id 'org.jetbrains.kotlin.android'
    id 'kotlin-parcelize'
//    id 'com.google.devtools.ksp'
    alias libs.plugins.ksp.devtools
    alias libs.plugins.androidx.room
}

android {

    namespace 'org.sinou.pydia.client'

    compileSdk 34

    // Gather overrides in a distinct folder for easier maintenance
    sourceSets.main.res.srcDir 'src/main/res-overrides'

    defaultConfig {
        applicationId "org.sinou.pydia.client.next"
        minSdk 24
        targetSdk 34
        versionCode 10
        versionName "0.2.1"

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

//    composeOptions {
//        // See https://developer.android.com/jetpack/androidx/releases/compose-kotlin
//        kotlinCompilerExtensionVersion = "1.5.13"
//    }

    buildTypes {

//        release {
//            signingConfig signingConfigs.release
//            resValue "string", "app_version",
//                    "${defaultConfig.versionName}"
//
//            minifyEnabled true
//            // If you haven't already built your app using minifyEnabled for code shrinking,
//            // then try that before enabling shrinkResources, because you might need to edit your proguard-rules.pro file
//            // to keep classes or methods that are created or invoked dynamically before you start removing resources.
//            shrinkResources true
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//
//            // See https://developer.android.com/build/shrink-code#android_gradle_plugin_version_41_or_later
//            // And you must have this installed in Android Studio https://developer.android.com/studio/projects/install-ndk
//            // to also generate and upload the file that enable understanding stack traces seen in production
//            // The generated mapping.txt file can than be uploaded on the store following this:
//            // https://support.google.com/googleplay/android-developer/answer/9848633#upload_file&zippy=%2Cupload-files-using-play-console
//            ndk {
//                debugSymbolLevel 'FULL'
//            }
//        }

        debug {
            versionNameSuffix = '-dev'
            resValue "string", "app_version",
                    "${defaultConfig.versionName}${versionNameSuffix}"
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    sourceSets {
        main {
            kotlin.srcDir 'src/main/kotlin'
        }
    }

    kotlinOptions {
        jvmTarget = "17"
    }

    buildFeatures {
        compose true
        buildConfig true
    }

    room {
        schemaDirectory "$projectDir/schemas"
    }

    // We do not want that the linter makes builds fail. It is quite extremist by default.
    lintOptions {
        abortOnError false
    }
}

dependencies {
    api project(":sdk-kotlin")

    // Kotlin standard library and coroutines
    implementation libs.kotlin.stdlib
    implementation libs.kotlinx.coroutines.core
    implementation libs.kotlinx.coroutines.android

    // Dependency injection with Koin https://insert-koin.io/
    implementation platform(libs.koin.bom)
    implementation libs.koin.core
    implementation libs.koin.android
    implementation libs.koin.androidx.workmanager
    implementation libs.koin.androidx.navigation
    implementation libs.koin.androidx.compose

    // Files
    implementation libs.aws.android.sdk.s3

    // Utils
    implementation libs.gson

    // Preferences
    implementation libs.datastore.preferences
    // QRCode generation
    implementation libs.zxing

    // Room for database, work for background
    ksp libs.androidx.room.compiler
    implementation libs.androidx.room.ktx
    implementation libs.androidx.work.runtime.ktx

    // Latest version can be found here: https://developer.android.com/jetpack/compose/bom
    implementation platform(libs.compose.bom)

    // Android UI and appcompat
    implementation libs.androidx.core.ktx
    implementation libs.androidx.core.splashscreen
    // ViewModel
    implementation libs.androidx.lifecycle.viewmodel.ktx
    // Material UI => we still need this to build custom palette based on remote server custom primary color
    implementation libs.material

    // Jetpack Compose libraries, we rely on the BOM to provide correct versions.
    implementation libs.androidx.runtime
    implementation libs.androidx.ui
    implementation libs.androidx.ui.util
    implementation libs.androidx.ui.tooling
    implementation libs.androidx.foundation
    implementation libs.androidx.foundation.layout
    implementation libs.androidx.material3
    implementation libs.androidx.material3.windowsizeclass

    // We use material 3, so remove remaining code that depend on this and remove the dep.
    implementation libs.androidx.material
    // This library is also provided as an API dependency by androidx.compose.material:material.
    // We specify it explicitly so that we won't break when we finally remove material lib from
    // the explicit dependency tree
    implementation libs.androidx.material.icons.core
    // this separate library, the full set of Material icons. Due to the very large size of this lib,
    // Make sure to use R8/Proguard to strip unused icons when including this as a direct dependency.
    // See https://developer.android.com/reference/kotlin/androidx/compose/material/icons/package-summary
    implementation libs.androidx.material.icons.extended

    // Include extensions that permit integration of Compose with extra 3rd party libraries.
    implementation libs.androidx.navigation.compose

    // Enable custom data loader for glide library (display images)
    implementation libs.glide
    implementation libs.glide.compose
    ksp libs.glide.ksp
    ksp libs.glide.compiler

    /*   Tests */
    //
    testImplementation platform(libs.koin.bom)
}
