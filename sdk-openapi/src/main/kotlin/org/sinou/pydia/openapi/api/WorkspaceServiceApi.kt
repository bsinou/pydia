/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.sinou.pydia.openapi.api

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.sinou.pydia.openapi.model.IdmWorkspace
import org.sinou.pydia.openapi.model.PutWorkspaceRequest
import org.sinou.pydia.openapi.model.RestDeleteResponse
import org.sinou.pydia.openapi.model.RestSearchWorkspaceRequest
import org.sinou.pydia.openapi.model.RestWorkspaceCollection

import com.squareup.moshi.Json

import org.sinou.pydia.openapi.infrastructure.ApiClient
import org.sinou.pydia.openapi.infrastructure.ApiResponse
import org.sinou.pydia.openapi.infrastructure.ClientException
import org.sinou.pydia.openapi.infrastructure.ClientError
import org.sinou.pydia.openapi.infrastructure.ServerException
import org.sinou.pydia.openapi.infrastructure.ServerError
import org.sinou.pydia.openapi.infrastructure.MultiValueMap
import org.sinou.pydia.openapi.infrastructure.RequestConfig
import org.sinou.pydia.openapi.infrastructure.RequestMethod
import org.sinou.pydia.openapi.infrastructure.ResponseType
import org.sinou.pydia.openapi.infrastructure.Success
import org.sinou.pydia.openapi.infrastructure.toMultiValue

class WorkspaceServiceApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * enum for parameter scope
     */
     enum class ScopeDeleteWorkspace(val value: kotlin.String) {
         @Json(name = "ANY") ANY("ANY"),
         @Json(name = "ADMIN") ADMIN("ADMIN"),
         @Json(name = "ROOM") ROOM("ROOM"),
         @Json(name = "LINK") LINK("LINK");

        /**
         * Override [toString()] to avoid using the enum variable name as the value, and instead use
         * the actual value defined in the API spec file.
         *
         * This solves a problem when the variable name and its value are different, and ensures that
         * the client sends the correct enum values to the server always.
         */
        override fun toString(): kotlin.String = "$value"
     }

    /**
     * Delete an existing workspace
     * 
     * @param slug Slug is an url-compatible form of the workspace label, or can be freely modified (max length 500)
     * @param UUID Unique identifier of the workspace (optional)
     * @param label Label of the workspace (max length 500) (optional)
     * @param description Description of the workspace (max length 1000) (optional)
     * @param scope Scope can be ADMIN, ROOM (&#x3D;CELL) or LINK (optional, default to ANY)
     * @param lastUpdated Last modification time (optional)
     * @param attributes JSON-encoded list of attributes (optional)
     * @param rootUUIDs Quick list of the RootNodes uuids (optional)
     * @param policiesContextEditable Context-resolved to quickly check if workspace is editable or not (optional)
     * @return RestDeleteResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteWorkspace(slug: kotlin.String, UUID: kotlin.String? = null, label: kotlin.String? = null, description: kotlin.String? = null, scope: ScopeDeleteWorkspace? = ScopeDeleteWorkspace.ANY, lastUpdated: kotlin.Int? = null, attributes: kotlin.String? = null, rootUUIDs: kotlin.collections.List<kotlin.String>? = null, policiesContextEditable: kotlin.Boolean? = null) : RestDeleteResponse {
        val localVarResponse = deleteWorkspaceWithHttpInfo(slug = slug, UUID = UUID, label = label, description = description, scope = scope, lastUpdated = lastUpdated, attributes = attributes, rootUUIDs = rootUUIDs, policiesContextEditable = policiesContextEditable)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RestDeleteResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete an existing workspace
     * 
     * @param slug Slug is an url-compatible form of the workspace label, or can be freely modified (max length 500)
     * @param UUID Unique identifier of the workspace (optional)
     * @param label Label of the workspace (max length 500) (optional)
     * @param description Description of the workspace (max length 1000) (optional)
     * @param scope Scope can be ADMIN, ROOM (&#x3D;CELL) or LINK (optional, default to ANY)
     * @param lastUpdated Last modification time (optional)
     * @param attributes JSON-encoded list of attributes (optional)
     * @param rootUUIDs Quick list of the RootNodes uuids (optional)
     * @param policiesContextEditable Context-resolved to quickly check if workspace is editable or not (optional)
     * @return ApiResponse<RestDeleteResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteWorkspaceWithHttpInfo(slug: kotlin.String, UUID: kotlin.String?, label: kotlin.String?, description: kotlin.String?, scope: ScopeDeleteWorkspace?, lastUpdated: kotlin.Int?, attributes: kotlin.String?, rootUUIDs: kotlin.collections.List<kotlin.String>?, policiesContextEditable: kotlin.Boolean?) : ApiResponse<RestDeleteResponse?> {
        val localVariableConfig = deleteWorkspaceRequestConfig(slug = slug, UUID = UUID, label = label, description = description, scope = scope, lastUpdated = lastUpdated, attributes = attributes, rootUUIDs = rootUUIDs, policiesContextEditable = policiesContextEditable)

        return request<Unit, RestDeleteResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteWorkspace
     *
     * @param slug Slug is an url-compatible form of the workspace label, or can be freely modified (max length 500)
     * @param UUID Unique identifier of the workspace (optional)
     * @param label Label of the workspace (max length 500) (optional)
     * @param description Description of the workspace (max length 1000) (optional)
     * @param scope Scope can be ADMIN, ROOM (&#x3D;CELL) or LINK (optional, default to ANY)
     * @param lastUpdated Last modification time (optional)
     * @param attributes JSON-encoded list of attributes (optional)
     * @param rootUUIDs Quick list of the RootNodes uuids (optional)
     * @param policiesContextEditable Context-resolved to quickly check if workspace is editable or not (optional)
     * @return RequestConfig
     */
    fun deleteWorkspaceRequestConfig(slug: kotlin.String, UUID: kotlin.String?, label: kotlin.String?, description: kotlin.String?, scope: ScopeDeleteWorkspace?, lastUpdated: kotlin.Int?, attributes: kotlin.String?, rootUUIDs: kotlin.collections.List<kotlin.String>?, policiesContextEditable: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (UUID != null) {
                    put("UUID", listOf(UUID.toString()))
                }
                if (label != null) {
                    put("Label", listOf(label.toString()))
                }
                if (description != null) {
                    put("Description", listOf(description.toString()))
                }
                if (scope != null) {
                    put("Scope", listOf(scope.value))
                }
                if (lastUpdated != null) {
                    put("LastUpdated", listOf(lastUpdated.toString()))
                }
                if (attributes != null) {
                    put("Attributes", listOf(attributes.toString()))
                }
                if (rootUUIDs != null) {
                    put("RootUUIDs", toMultiValue(rootUUIDs.toList(), "multi"))
                }
                if (policiesContextEditable != null) {
                    put("PoliciesContextEditable", listOf(policiesContextEditable.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/workspace/{Slug}".replace("{"+"Slug"+"}", encodeURIComponent(slug.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Create or update a workspace
     * 
     * @param slug Slug is an url-compatible form of the workspace label, or can be freely modified (max length 500)
     * @param body 
     * @return IdmWorkspace
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun putWorkspace(slug: kotlin.String, body: PutWorkspaceRequest) : IdmWorkspace {
        val localVarResponse = putWorkspaceWithHttpInfo(slug = slug, body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as IdmWorkspace
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create or update a workspace
     * 
     * @param slug Slug is an url-compatible form of the workspace label, or can be freely modified (max length 500)
     * @param body 
     * @return ApiResponse<IdmWorkspace?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun putWorkspaceWithHttpInfo(slug: kotlin.String, body: PutWorkspaceRequest) : ApiResponse<IdmWorkspace?> {
        val localVariableConfig = putWorkspaceRequestConfig(slug = slug, body = body)

        return request<PutWorkspaceRequest, IdmWorkspace>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation putWorkspace
     *
     * @param slug Slug is an url-compatible form of the workspace label, or can be freely modified (max length 500)
     * @param body 
     * @return RequestConfig
     */
    fun putWorkspaceRequestConfig(slug: kotlin.String, body: PutWorkspaceRequest) : RequestConfig<PutWorkspaceRequest> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/workspace/{Slug}".replace("{"+"Slug"+"}", encodeURIComponent(slug.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Search workspaces on certain keys
     * 
     * @param body 
     * @return RestWorkspaceCollection
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun searchWorkspaces(body: RestSearchWorkspaceRequest) : RestWorkspaceCollection {
        val localVarResponse = searchWorkspacesWithHttpInfo(body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RestWorkspaceCollection
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Search workspaces on certain keys
     * 
     * @param body 
     * @return ApiResponse<RestWorkspaceCollection?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun searchWorkspacesWithHttpInfo(body: RestSearchWorkspaceRequest) : ApiResponse<RestWorkspaceCollection?> {
        val localVariableConfig = searchWorkspacesRequestConfig(body = body)

        return request<RestSearchWorkspaceRequest, RestWorkspaceCollection>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation searchWorkspaces
     *
     * @param body 
     * @return RequestConfig
     */
    fun searchWorkspacesRequestConfig(body: RestSearchWorkspaceRequest) : RequestConfig<RestSearchWorkspaceRequest> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/workspace",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
