buildscript {

    ext {
        // Global variables: build plugins
        kotlin_version = '1.9.23'
        gradle_build_tools_version = '8.4.1'
        ksp_version = '1.9.23-1.0.20'
        room_version = '2.6.1'
    }

    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.android.tools.build:gradle:$gradle_build_tools_version"
    }
}

plugins {
    id 'com.google.devtools.ksp' version "$ksp_version" apply false
    id 'androidx.room' version "$room_version" apply false
}

// Retrieve local context
def localProperties = new Properties()
localProperties.load(new FileInputStream(rootProject.file("local.properties")))
retrieveFromEnv(localProperties) // There must be a more elegant way to do this...

// Manage optional local submodules
def sdkKotlinCheck = new File('sdk-kotlin/sdk-kotlin.gradle')
def openApiClientCheck = new File('openapi-client/openapi-client.gradle')

// Expose custom properties to all modules in the project.
ext {
    githubUrl = 'https://github.com/bsinou/pydia.git'

    // Expose properties retrieved from files to child projects
    configs = localProperties

    useLocalSdkKotlin = sdkKotlinCheck.exists()
    useLocalOpenapiClient = openApiClientCheck.exists()
}

allprojects {
    repositories {
        mavenLocal()
        google()
        mavenCentral()
    }
}

/* Factorise some of the methods used in various sub projects */
// Pre-create generic common pom configuration:
ext.getBasePom = { repoURL ->
    return {
        licenses {
            license {
                name "The Apache Software License, Version 2.0"
                url "http://www.apache.org/licenses/LICENSE-2.0.txt"
                distribution "repo"
            }
        }

        developers {
            developer {
                id "bsinou"
                name "Bruno Sinou"
                email "bruno.sinou@posteo.de"
            }
        }

        scm {
            url repoURL
        }
    }
}

// Override local.properties sensitive values with environment parameter
def static retrieveFromEnv(Properties props) {

    def tmpValue = System.getenv('ANDROID_KEYSTORE_PATH')
    if (tmpValue != null) {
        props['keystore.path'] = tmpValue
    }
    tmpValue = System.getenv('ANDROID_KEYSTORE_PWD')
    if (tmpValue != null) {
        props['keystore.pwd'] = tmpValue
    }
    tmpValue = System.getenv('ANDROID_SIGNKEY_ALIAS')
    if (tmpValue != null) {
        props['signkey.alias'] = tmpValue
    }
    tmpValue = System.getenv('ANDROID_SIGNKEY_PWD')
    if (tmpValue != null) {
        props['signkey.pwd'] = tmpValue
    }
}
