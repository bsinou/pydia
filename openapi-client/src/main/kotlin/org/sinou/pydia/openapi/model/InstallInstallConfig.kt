/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.sinou.pydia.openapi.model

import org.sinou.pydia.openapi.model.InstallCheckResult
import org.sinou.pydia.openapi.model.InstallProxyConfig

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param checkResults 
 * @param documentsDSN 
 * @param proxyConfig 
 * @param useDocumentsDSN 
 * @param dbConnectionType 
 * @param dbManualDSN 
 * @param dbSocketFile 
 * @param dbSocketName 
 * @param dbSocketPassword 
 * @param dbSocketUser 
 * @param dbTCPHostname 
 * @param dbTCPName 
 * @param dbTCPPassword 
 * @param dbTCPPort 
 * @param dbTCPUser 
 * @param dbUseDefaults 
 * @param dsFolder 
 * @param dsName 
 * @param dsPort 
 * @param dsS3ApiKey 
 * @param dsS3ApiSecret 
 * @param dsS3BucketBinaries 
 * @param dsS3BucketCells 
 * @param dsS3BucketDefault 
 * @param dsS3BucketPersonal 
 * @param dsS3BucketThumbs 
 * @param dsS3BucketVersions 
 * @param dsS3Custom 
 * @param dsS3CustomRegion 
 * @param dsType 
 * @param frontendApplicationTitle 
 * @param frontendDefaultLanguage 
 * @param frontendHosts 
 * @param frontendLogin 
 * @param frontendPassword 
 * @param frontendRepeatPassword 
 * @param internalUrl 
 * @param licenseRequired 
 * @param licenseString 
 */


data class InstallInstallConfig (

    @Json(name = "CheckResults")
    val checkResults: kotlin.collections.List<InstallCheckResult>? = null,

    @Json(name = "DocumentsDSN")
    val documentsDSN: kotlin.String? = null,

    @Json(name = "ProxyConfig")
    val proxyConfig: InstallProxyConfig? = null,

    @Json(name = "UseDocumentsDSN")
    val useDocumentsDSN: kotlin.Boolean? = null,

    @Json(name = "dbConnectionType")
    val dbConnectionType: kotlin.String? = null,

    @Json(name = "dbManualDSN")
    val dbManualDSN: kotlin.String? = null,

    @Json(name = "dbSocketFile")
    val dbSocketFile: kotlin.String? = null,

    @Json(name = "dbSocketName")
    val dbSocketName: kotlin.String? = null,

    @Json(name = "dbSocketPassword")
    val dbSocketPassword: kotlin.String? = null,

    @Json(name = "dbSocketUser")
    val dbSocketUser: kotlin.String? = null,

    @Json(name = "dbTCPHostname")
    val dbTCPHostname: kotlin.String? = null,

    @Json(name = "dbTCPName")
    val dbTCPName: kotlin.String? = null,

    @Json(name = "dbTCPPassword")
    val dbTCPPassword: kotlin.String? = null,

    @Json(name = "dbTCPPort")
    val dbTCPPort: kotlin.String? = null,

    @Json(name = "dbTCPUser")
    val dbTCPUser: kotlin.String? = null,

    @Json(name = "dbUseDefaults")
    val dbUseDefaults: kotlin.Boolean? = null,

    @Json(name = "dsFolder")
    val dsFolder: kotlin.String? = null,

    @Json(name = "dsName")
    val dsName: kotlin.String? = null,

    @Json(name = "dsPort")
    val dsPort: kotlin.String? = null,

    @Json(name = "dsS3ApiKey")
    val dsS3ApiKey: kotlin.String? = null,

    @Json(name = "dsS3ApiSecret")
    val dsS3ApiSecret: kotlin.String? = null,

    @Json(name = "dsS3BucketBinaries")
    val dsS3BucketBinaries: kotlin.String? = null,

    @Json(name = "dsS3BucketCells")
    val dsS3BucketCells: kotlin.String? = null,

    @Json(name = "dsS3BucketDefault")
    val dsS3BucketDefault: kotlin.String? = null,

    @Json(name = "dsS3BucketPersonal")
    val dsS3BucketPersonal: kotlin.String? = null,

    @Json(name = "dsS3BucketThumbs")
    val dsS3BucketThumbs: kotlin.String? = null,

    @Json(name = "dsS3BucketVersions")
    val dsS3BucketVersions: kotlin.String? = null,

    @Json(name = "dsS3Custom")
    val dsS3Custom: kotlin.String? = null,

    @Json(name = "dsS3CustomRegion")
    val dsS3CustomRegion: kotlin.String? = null,

    @Json(name = "dsType")
    val dsType: kotlin.String? = null,

    @Json(name = "frontendApplicationTitle")
    val frontendApplicationTitle: kotlin.String? = null,

    @Json(name = "frontendDefaultLanguage")
    val frontendDefaultLanguage: kotlin.String? = null,

    @Json(name = "frontendHosts")
    val frontendHosts: kotlin.String? = null,

    @Json(name = "frontendLogin")
    val frontendLogin: kotlin.String? = null,

    @Json(name = "frontendPassword")
    val frontendPassword: kotlin.String? = null,

    @Json(name = "frontendRepeatPassword")
    val frontendRepeatPassword: kotlin.String? = null,

    @Json(name = "internalUrl")
    val internalUrl: kotlin.String? = null,

    @Json(name = "licenseRequired")
    val licenseRequired: kotlin.Boolean? = null,

    @Json(name = "licenseString")
    val licenseString: kotlin.String? = null

)

