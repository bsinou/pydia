/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.sinou.pydia.openapi.api

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.sinou.pydia.openapi.model.ResetPasswordTokenRequest
import org.sinou.pydia.openapi.model.RestDocumentAccessTokenRequest
import org.sinou.pydia.openapi.model.RestDocumentAccessTokenResponse
import org.sinou.pydia.openapi.model.RestError
import org.sinou.pydia.openapi.model.RestResetPasswordRequest
import org.sinou.pydia.openapi.model.RestResetPasswordResponse
import org.sinou.pydia.openapi.model.RestResetPasswordTokenResponse
import org.sinou.pydia.openapi.model.RestRevokeRequest
import org.sinou.pydia.openapi.model.RestRevokeResponse

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class TokenServiceApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * Generate a temporary access token for a specific document for the current user
     * 
     * @param body 
     * @return RestDocumentAccessTokenResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun generateDocumentAccessToken(body: RestDocumentAccessTokenRequest) : RestDocumentAccessTokenResponse {
        val localVarResponse = generateDocumentAccessTokenWithHttpInfo(body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RestDocumentAccessTokenResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Generate a temporary access token for a specific document for the current user
     * 
     * @param body 
     * @return ApiResponse<RestDocumentAccessTokenResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun generateDocumentAccessTokenWithHttpInfo(body: RestDocumentAccessTokenRequest) : ApiResponse<RestDocumentAccessTokenResponse?> {
        val localVariableConfig = generateDocumentAccessTokenRequestConfig(body = body)

        return request<RestDocumentAccessTokenRequest, RestDocumentAccessTokenResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation generateDocumentAccessToken
     *
     * @param body 
     * @return RequestConfig
     */
    fun generateDocumentAccessTokenRequestConfig(body: RestDocumentAccessTokenRequest) : RequestConfig<RestDocumentAccessTokenRequest> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/auth/token/document",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Finish up the reset password process by providing the unique token
     * 
     * @param body 
     * @return RestResetPasswordResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun resetPassword(body: RestResetPasswordRequest) : RestResetPasswordResponse {
        val localVarResponse = resetPasswordWithHttpInfo(body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RestResetPasswordResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Finish up the reset password process by providing the unique token
     * 
     * @param body 
     * @return ApiResponse<RestResetPasswordResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun resetPasswordWithHttpInfo(body: RestResetPasswordRequest) : ApiResponse<RestResetPasswordResponse?> {
        val localVariableConfig = resetPasswordRequestConfig(body = body)

        return request<RestResetPasswordRequest, RestResetPasswordResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation resetPassword
     *
     * @param body 
     * @return RequestConfig
     */
    fun resetPasswordRequestConfig(body: RestResetPasswordRequest) : RequestConfig<RestResetPasswordRequest> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/auth/reset-password",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Generate a unique token for the reset password process
     * 
     * @param userLogin Start a ResetPassword workflow for this user
     * @param body 
     * @return RestResetPasswordTokenResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun resetPasswordToken(userLogin: kotlin.String, body: ResetPasswordTokenRequest) : RestResetPasswordTokenResponse {
        val localVarResponse = resetPasswordTokenWithHttpInfo(userLogin = userLogin, body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RestResetPasswordTokenResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Generate a unique token for the reset password process
     * 
     * @param userLogin Start a ResetPassword workflow for this user
     * @param body 
     * @return ApiResponse<RestResetPasswordTokenResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun resetPasswordTokenWithHttpInfo(userLogin: kotlin.String, body: ResetPasswordTokenRequest) : ApiResponse<RestResetPasswordTokenResponse?> {
        val localVariableConfig = resetPasswordTokenRequestConfig(userLogin = userLogin, body = body)

        return request<ResetPasswordTokenRequest, RestResetPasswordTokenResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation resetPasswordToken
     *
     * @param userLogin Start a ResetPassword workflow for this user
     * @param body 
     * @return RequestConfig
     */
    fun resetPasswordTokenRequestConfig(userLogin: kotlin.String, body: ResetPasswordTokenRequest) : RequestConfig<ResetPasswordTokenRequest> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/auth/reset-password-token/{UserLogin}".replace("{"+"UserLogin"+"}", encodeURIComponent(userLogin.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Revoke a JWT token
     * 
     * @param body 
     * @return RestRevokeResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun revoke(body: RestRevokeRequest) : RestRevokeResponse {
        val localVarResponse = revokeWithHttpInfo(body = body)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RestRevokeResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Revoke a JWT token
     * 
     * @param body 
     * @return ApiResponse<RestRevokeResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun revokeWithHttpInfo(body: RestRevokeRequest) : ApiResponse<RestRevokeResponse?> {
        val localVariableConfig = revokeRequestConfig(body = body)

        return request<RestRevokeRequest, RestRevokeResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation revoke
     *
     * @param body 
     * @return RequestConfig
     */
    fun revokeRequestConfig(body: RestRevokeRequest) : RequestConfig<RestRevokeRequest> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/auth/token/revoke",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
