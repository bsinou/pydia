/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.sinou.pydia.openapi.model

import org.sinou.pydia.openapi.model.JobsAction
import org.sinou.pydia.openapi.model.JobsChatEventFilter
import org.sinou.pydia.openapi.model.JobsContextMetaFilter
import org.sinou.pydia.openapi.model.JobsDataSourceSelector
import org.sinou.pydia.openapi.model.JobsIdmSelector
import org.sinou.pydia.openapi.model.JobsJobHook
import org.sinou.pydia.openapi.model.JobsJobParameter
import org.sinou.pydia.openapi.model.JobsNodesSelector
import org.sinou.pydia.openapi.model.JobsSchedule
import org.sinou.pydia.openapi.model.JobsTask
import org.sinou.pydia.openapi.model.JobsUsersSelector
import org.sinou.pydia.openapi.model.ProtobufAny

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param actions 
 * @param autoClean 
 * @param autoRestart 
 * @param autoStart 
 * @param chatEventFilter 
 * @param contextMetaFilter 
 * @param createdAt 
 * @param custom 
 * @param dataSourceFilter 
 * @param eventNames 
 * @param hooks 
 * @param ID 
 * @param idmFilter 
 * @param inactive 
 * @param label 
 * @param languages 
 * @param maxConcurrency 
 * @param mergeAction 
 * @param metadata Additional user-defined metadata, can be used for icon, documentation, pre-requisites, etc.
 * @param modifiedAt 
 * @param nodeEventFilter 
 * @param owner 
 * @param parameters 
 * @param resourcesDependencies 
 * @param schedule 
 * @param tasks 
 * @param tasksSilentUpdate 
 * @param timeout 
 * @param userEventFilter 
 * @param versionMeta 
 */


data class JobsJob (

    @Json(name = "Actions")
    val actions: kotlin.collections.List<JobsAction>? = null,

    @Json(name = "AutoClean")
    val autoClean: kotlin.Boolean? = null,

    @Json(name = "AutoRestart")
    val autoRestart: kotlin.Boolean? = null,

    @Json(name = "AutoStart")
    val autoStart: kotlin.Boolean? = null,

    @Json(name = "ChatEventFilter")
    val chatEventFilter: JobsChatEventFilter? = null,

    @Json(name = "ContextMetaFilter")
    val contextMetaFilter: JobsContextMetaFilter? = null,

    @Json(name = "CreatedAt")
    val createdAt: kotlin.Int? = null,

    @Json(name = "Custom")
    val custom: kotlin.Boolean? = null,

    @Json(name = "DataSourceFilter")
    val dataSourceFilter: JobsDataSourceSelector? = null,

    @Json(name = "EventNames")
    val eventNames: kotlin.collections.List<kotlin.String>? = null,

    @Json(name = "Hooks")
    val hooks: kotlin.collections.List<JobsJobHook>? = null,

    @Json(name = "ID")
    val ID: kotlin.String? = null,

    @Json(name = "IdmFilter")
    val idmFilter: JobsIdmSelector? = null,

    @Json(name = "Inactive")
    val inactive: kotlin.Boolean? = null,

    @Json(name = "Label")
    val label: kotlin.String? = null,

    @Json(name = "Languages")
    val languages: kotlin.collections.List<kotlin.String>? = null,

    @Json(name = "MaxConcurrency")
    val maxConcurrency: kotlin.Int? = null,

    @Json(name = "MergeAction")
    val mergeAction: JobsAction? = null,

    /* Additional user-defined metadata, can be used for icon, documentation, pre-requisites, etc. */
    @Json(name = "Metadata")
    val metadata: kotlin.collections.Map<kotlin.String, kotlin.String>? = null,

    @Json(name = "ModifiedAt")
    val modifiedAt: kotlin.Int? = null,

    @Json(name = "NodeEventFilter")
    val nodeEventFilter: JobsNodesSelector? = null,

    @Json(name = "Owner")
    val owner: kotlin.String? = null,

    @Json(name = "Parameters")
    val parameters: kotlin.collections.List<JobsJobParameter>? = null,

    @Json(name = "ResourcesDependencies")
    val resourcesDependencies: kotlin.collections.List<ProtobufAny>? = null,

    @Json(name = "Schedule")
    val schedule: JobsSchedule? = null,

    @Json(name = "Tasks")
    val tasks: kotlin.collections.List<JobsTask>? = null,

    @Json(name = "TasksSilentUpdate")
    val tasksSilentUpdate: kotlin.Boolean? = null,

    @Json(name = "Timeout")
    val timeout: kotlin.String? = null,

    @Json(name = "UserEventFilter")
    val userEventFilter: JobsUsersSelector? = null,

    @Json(name = "VersionMeta")
    val versionMeta: kotlin.collections.Map<kotlin.String, kotlin.String>? = null

) {


}

