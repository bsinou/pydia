plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-parcelize'
    id 'com.google.devtools.ksp'
    id 'androidx.room'
}

android {

    namespace 'org.sinou.pydia.client'

    compileSdk 34

    // Gather overrides in a distinct folder for easier maintenance
    sourceSets.main.res.srcDir 'src/main/res-overrides'

    defaultConfig {
        applicationId "org.sinou.pydia.client.next"
        minSdk 24
        targetSdk 34
        versionCode 10
        versionName "0.2.1"

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    composeOptions {
        // See https://developer.android.com/jetpack/androidx/releases/compose-kotlin
        kotlinCompilerExtensionVersion = "1.5.11"
    }

    buildTypes {

//        release {
//            signingConfig signingConfigs.release
//            resValue "string", "app_version",
//                    "${defaultConfig.versionName}"
//
//            minifyEnabled true
//            // If you haven't already built your app using minifyEnabled for code shrinking,
//            // then try that before enabling shrinkResources, because you might need to edit your proguard-rules.pro file
//            // to keep classes or methods that are created or invoked dynamically before you start removing resources.
//            shrinkResources true
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//
//            // See https://developer.android.com/build/shrink-code#android_gradle_plugin_version_41_or_later
//            // And you must have this installed in Android Studio https://developer.android.com/studio/projects/install-ndk
//            // to also generate and upload the file that enable understanding stack traces seen in production
//            // The generated mapping.txt file can than be uploaded on the store followin this:
//            // https://support.google.com/googleplay/android-developer/answer/9848633#upload_file&zippy=%2Cupload-files-using-play-console
//            ndk {
//                debugSymbolLevel 'FULL'
//            }
//        }

        debug {
            versionNameSuffix = '-dev'
            resValue "string", "app_version",
                    "${defaultConfig.versionName}${versionNameSuffix}"
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    sourceSets {
        main {
            kotlin.srcDir 'src/main/kotlin'
            // Include Java source dir if you have mixed Java and Kotlin code
            java.srcDir 'src/main/java'
        }
    }

    kotlinOptions {
        jvmTarget = "17"
    }

    buildFeatures {
        compose true
        buildConfig true
    }

    room {
        schemaDirectory "$projectDir/schemas"
    }

    // We do not want that the linter makes builds fail. It is quite extremist by default.
    lintOptions {
        abortOnError false
    }
}

dependencies {

    api project(":sdk-kotlin")

    // Latest version can be found here: https://developer.android.com/jetpack/compose/bom
    implementation platform('androidx.compose:compose-bom:2024.05.00')

    // Enable custom data loader for glide library (display images)
    // annotationProcessor 'com.github.bumptech.glide:compiler:5.0.0-rc01'
    ksp "com.github.bumptech.glide:ksp:5.0.0-rc01"
    ksp "com.github.bumptech.glide:compiler:5.0.0-rc01"

    // Main libraries

    // Dependency injection with Koin https://insert-koin.io/ , we now use the Koin BOM
    implementation platform('io.insert-koin:koin-bom:3.5.3')
    implementation "io.insert-koin:koin-core"
    implementation "io.insert-koin:koin-android"
    implementation "io.insert-koin:koin-androidx-workmanager"
    implementation "io.insert-koin:koin-androidx-navigation"
    implementation "io.insert-koin:koin-androidx-compose"

    // Kotlin standard library and coroutines
    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.9.23"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3"

    // Android UI and appcompat
    implementation "androidx.core:core-ktx:1.13.1"
    implementation "androidx.core:core-splashscreen:1.0.1"
    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.7.0"
    // Material UI => we still need this to build custom palette based on remote server custom primary color
    implementation "com.google.android.material:material:1.12.0"

    // Room for database, work for background
    implementation "androidx.room:room-ktx:$room_version"
    ksp "androidx.room:room-compiler:$room_version"
    implementation "androidx.work:work-runtime-ktx:2.9.0"

    // Files
    implementation "com.amazonaws:aws-android-sdk-s3:2.75.0"
    implementation "com.github.bumptech.glide:glide:5.0.0-rc01"
    // Preferences
    implementation "androidx.datastore:datastore-preferences:1.1.1"
    // Utils
    implementation "com.google.code.gson:gson:2.10.1"
    // QRCode generation
    implementation "com.google.zxing:core:3.5.2"

    // Jetpack Compose libraries, we rely on the BOM to provide correct versions.
    implementation "androidx.compose.runtime:runtime"
    implementation "androidx.compose.ui:ui"
    implementation "androidx.compose.ui:ui-util"
    implementation "androidx.compose.ui:ui-tooling"
    implementation "androidx.compose.foundation:foundation"
    implementation "androidx.compose.foundation:foundation-layout"
    implementation "androidx.compose.material3:material3"
    implementation "androidx.compose.material3:material3-window-size-class"

    // We use material 3, so remove remaining code that depend on this and remove the dep.
    implementation "androidx.compose.material:material"
    // This library is also provided as an API dependency by androidx.compose.material:material.
    // We specify it explicitly so that we won't break when we finally remove material lib from
    // the explicit dependency tree
    implementation "androidx.compose.material:material-icons-core"
    // this separate library, the full set of Material icons. Due to the very large size of this lib,
    // Make sure to use R8/Proguard to strip unused icons when including this as a direct dependency.
    // See https://developer.android.com/reference/kotlin/androidx/compose/material/icons/package-summary
    implementation "androidx.compose.material:material-icons-extended"

    // Include extensions that permit integration of Compose with extra 3rd party libraries.
    implementation "androidx.navigation:navigation-compose:2.7.7"
    implementation "com.github.bumptech.glide:compose:1.0.0-beta01"

    testImplementation platform('io.insert-koin:koin-bom:3.5.3')
}
